import os
import logging
import smtplib
import subprocess
from email.message import EmailMessage
from pathlib import Path
from telegram import Update, Document
from telegram.ext import Application, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ Kindle –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
SUPPORTED_KINDLE_EXTENSIONS = {
    ".epub", ".pdf", ".doc", ".docx", ".rtf", ".txt",
    ".html", ".htm", ".azw", ".azw3", ".azw4",
    ".jpg", ".jpeg", ".png", ".bmp", ".gif"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
KINDLE_EMAIL = os.getenv("KINDLE_EMAIL")
SMTP_SERVER = os.getenv("SMTP_SERVER")
SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
SMTP_LOGIN = os.getenv("SMTP_LOGIN")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CONVERT_PATH = os.getenv("CONVERT_PATH", "/usr/bin/ebook-convert")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc: Document = update.message.document
    ext = Path(doc.file_name).suffix.lower()

    if not ext:
        await update.message.reply_text("‚ùå Cannot determine file type.")
        return

    file = await doc.get_file()
    input_path = f"/tmp/{doc.file_unique_id}{ext}"
    output_path = input_path

    await file.download_to_drive(input_path)
    logger.info(f"Downloaded: {input_path}")

    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ EPUB
    if ext not in SUPPORTED_KINDLE_EXTENSIONS:
        output_path = str(Path(input_path).with_suffix(".epub"))
        await update.message.reply_text(f"‚öôÔ∏è Converting {ext} to EPUB...")

        try:
            subprocess.run([CONVERT_PATH, input_path, output_path], check=True)
            logger.info(f"Converted: {output_path}")
        except subprocess.CalledProcessError as e:
            logger.error(f"Conversion failed: {e}")
            await update.message.reply_text("‚ùå Conversion failed.")
            return

    await update.message.reply_text("üì§ Sending to Kindle...")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
    msg = EmailMessage()
    msg["Subject"] = ""
    msg["From"] = SMTP_LOGIN
    msg["To"] = KINDLE_EMAIL
    msg.set_content("Document for Kindle")

    with open(output_path, "rb") as f:
        msg.add_attachment(f.read(), maintype="application", subtype="octet-stream", filename=Path(output_path).name)

    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_LOGIN, SMTP_PASSWORD)
            server.send_message(msg)
        logger.info(f"Sent: {output_path} to {KINDLE_EMAIL}")
    except Exception as e:
        logger.error(f"Email error: {e}")
        await update.message.reply_text(f"‚ùå Email send failed: {e}")
        return

    await update.message.reply_text("‚úÖ Done. Check your Kindle.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    if not TELEGRAM_TOKEN:
        logger.error("Missing TELEGRAM_TOKEN in environment")
        return

    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    logger.info("Bot started.")
    app.run_polling()

if __name__ == "__main__":
    main()